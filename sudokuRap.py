#fee-fi-fu-fum
# -*- coding: utf-8 -*-
"""
Created on Fri Feb 10 09:21:35 2017

@author: chihebdaoues
"""
import resource
import time
from heapq import *
def printL(L):
    for i in range(9):
        for j in range(9):
            print(L[i][j],end=" ")
        print("\n");
def testLig(L,c):
    w=int('111111111', 2)
    for i in range(9):
        if L[c][i] ==0:
            continue
        elif(w & int(2**(L[c][i]-1)))==0:
            return False
        else:
            w-=2**(L[c][i]-1)
    r = []
    emp=0
    for i in range(9):
        if(w & 2**i)!=0:
            r.append(i+1);
            emp+=1
    return (r,emp)
    
def testCol(L,c):
    w=int('111111111', 2)
    for i in range(9):
        if L[i][c]==0:
            continue
        elif(w & int(2**(L[i][c]-1)))==0:
            return False
        else:
            w-=2**(L[i][c]-1)
    r = []
    emp=0
    for i in range(9):
        if(w & 2**i)!=0:
            r.append(i+1);
            emp+=1
    return (r,emp)

def testCase(L,c):
    w=int('111111111', 2)
    for i in range(3):
        for j in range(3):
            if L[(c//3)*3+i][(c%3)*3+j]==0:
                continue
            elif(w & int(2**(L[(c//3)*3+i][(c%3)*3+j]-1)))==0:
                return False
            else:
                w-=2**(L[(c//3)*3+i][(c%3)*3+j]-1)
    r = []
    emp=0
    for i in range(9):
        if(w & 2**i)!=0:
            r.append(i+1);
            emp+=1
    return (r,emp)
def Complet(L):
    emp=0;
    for i in range(3):
        for j in range(3):
            case= testCase(L,i*3+j)
            lig = testLig(L,i*3+j)
            col = testCol(L,i*3+j)
            if type(case)==bool or type(lig)==bool or type(col)==bool:
                return False
            else:
                emp+=case[1]
    return emp

def intersect(a, b):
    l = []
    if len(a)==0 or len(b)==0:
        return []
    elif(len(a)<len(b)):
        for i in a:
            if i in b:
                l.append(i)
    else:
        for i in b:
            if i in a:
                l.append(i)
    return l

def nbrPos(L):
    nbrP=[0,0,0,[]]
    minP=10
    for i in range(9):
            for j in range(9):
                if(L[i][j]!=0):
                    continue
                x=intersect(intersect(testLig(L,i)[0],testCol(L,j)[0]),
                                     testCase(L,(i//3)*3+j//3)[0])
                a=len(x)
                nbrP[0]+=a
                if(a<minP):
                    minP=a
                    nbrP=[nbrP[0],i,j,x]
    return nbrP
def solve(T):
    printL(T)
    start_time = time.time()
    heap = []
    step = Complet(T);
    nbrP=nbrPos(T);
    heappush(heap,(abs(nbrP[0]-step),nbrP,T))
    END = True
    while(END):
        T = heappop(heap)
        nbrP=T[1]
        T=T[2]
        for i in nbrP[3]:
            T[nbrP[1]][nbrP[2]]=i;
            complet = Complet(T)
            if(type(complet)==int):
                if(complet==0):
                    END = False
                    break
                nbrPt=nbrPos(T);
                heappush(heap,(abs(nbrPt[0]-complet),nbrPt,[t[:] for t in T]))
    print("--- solved in %s steps---"%step)
    print("--- %s seconds ---" % (time.time() - start_time))
    printL(T)
L=[]
L.append([[0,1,7, 4,9,6, 5,3,8],
   [4,9,6, 8,3,5, 7,2,1],
   [5,3,8, 7,2,1, 4,6,9],

   [6,4,2, 0,1,3, 8,7,5],
   [9,8,5, 6,7,2, 3,1,4],
   [1,7,3, 5,4,8, 2,9,6],

   [7,5,9, 2,6,4, 0,8,3],
   [8,2,1, 3,5,9, 6,4,7],
   [3,6,4, 1,8,7, 9,5,2]])

L.append([[0,0,0, 0,0,3, 0,0,0],
   [0,1,0, 0,0,0, 6,7,0],
   [0,7,0, 6,4,1, 0,0,0],

   [9,0,2, 3,0,6, 4,0,0],
   [0,0,5, 0,2,0, 3,0,0],
   [0,0,6, 8,0,4, 1,0,2],

   [0,0,0, 1,6,9, 0,4,0],
   [0,2,1, 0,0,0, 0,8,0],
   [0,0,0, 4,0,0, 0,0,0]])

L.append([[0,0,0, 0,8,0, 0,0,0],
   [0,8,6, 7,0,0, 5,9,3],
   [0,1,0, 0,0,0, 8,0,0],

   [0,0,2, 0,6,0, 0,0,8],
   [8,0,0, 4,0,0, 7,3,0],
   [0,0,5, 0,9,0, 0,0,2],

   [0,5,0, 0,0,0, 6,0,0],
   [0,3,7, 8,0,0, 1,5,9],
   [0,0,0, 0,7,0, 0,0,0]])
   
L.append([[0,0,0, 7,0,0, 9,0,0],
   [0,0,0, 0,4,8, 6,0,0],
   [4,6,0, 0,5,0, 0,0,0],
   
   [0,7,0, 8,0,1, 0,0,5],
   [0,1,3, 0,0,0, 2,7,0],
   [5,0,0, 6,0,2, 0,8,0],
   
   [0,0,0, 0,2,0, 0,3,4],
   [0,0,6, 5,1,0, 0,0,0],
   [0,0,7, 0,0,4, 0,0,0]])

L.append([[0,0,0, 0,0,0, 0,3,8],
   [0,3,0, 0,2,0, 0,6,0],
   [0,0,4, 0,3,1, 0,0,0],
    
   [2,0,0, 3,0,0, 8,0,0],
   [3,4,0, 1,0,6, 0,9,2],
   [0,0,8, 0,0,7, 0,0,3],
    
   [0,0,0, 6,1,0, 9,0,0],
   [0,6,0, 0,7,0, 0,1,0],
   [4,8,0, 0,0,0, 0,0,0]])
   
L.append([[0,0,6, 0,0,9, 5,0,7],
   [0,5,0, 0,1,0, 0,0,0],
   [3,0,0, 0,5,0, 2,0,0],
   
   [9,0,5, 0,0,0, 0,4,0],
   [0,0,0, 0,3,7, 0,2,0],
   [1,0,2, 0,0,0, 0,8,0],
   
   [4,0,0, 0,6,0, 8,0,0],
   [0,6,0, 0,2,0, 0,0,0],
   [0,0,8, 0,0,1, 4,0,6]])

L.append([[0,7,9, 1,0,2, 6,5,0],
   [3,0,0, 0,5,0, 0,0,2],
   [0,0,0, 6,0,8, 0,0,0],
   
   [0,4,3, 0,0,0, 1,2,0],
   [0,0,1, 0,7,0, 3,0,0],
   [2,0,0, 0,0,0, 0,0,7],
   
   [6,0,0, 4,0,5, 0,0,1],
   [0,3,2, 0,6,0, 5,7,0],
   [0,0,5, 0,0,0, 2,0,0]])
L.append([[0,7,9, 1,0,2, 6,5,0],
   [3,0,0, 0,5,0, 0,0,2],
   [0,0,0, 6,0,8, 0,0,0],
   
   [0,4,3, 0,0,0, 1,2,0],
   [0,0,1, 0,7,0, 3,0,0],
   [2,0,0, 0,0,0, 0,0,7],
   
   [6,0,0, 4,0,5, 0,0,1],
   [0,3,2, 0,6,0, 5,7,0],
   [0,0,5, 0,0,0, 2,0,0]])
L.append([[1,2,3, 4,5,6, 7,8,9],
   [4,5,6, 0,0,0, 0,0,0],
   [7,8,9, 0,0,0, 0,0,0],
   
   [0,0,0, 0,0,0, 0,0,0],
   [0,0,0, 0,0,0, 0,0,0],
   [0,0,0, 0,0,0, 0,0,0],
   
   [0,0,0, 0,0,0, 0,0,0],
   [0,0,0, 0,0,0, 0,0,0],
   [0,0,0, 0,0,0, 0,0,0]])
L.append([[0,0,0, 0,0,0, 0,0,0],
   [0,0,0, 0,0,0, 0,0,0],
   [0,0,0, 0,0,0, 0,0,0],
   
   [0,0,0, 0,0,0, 0,0,0],
   [0,0,0, 0,0,0, 0,0,0],
   [0,0,0, 0,0,0, 0,0,0],
   
   [0,0,0, 0,0,0, 0,0,0],
   [0,0,0, 0,0,0, 0,0,0],
   [0,0,0, 0,0,0, 0,0,0]])
start_time = time.time()
for i in L:
    print("---Matrice---")
    solve(i)
print("---Total---")
print(len(L))
print(resource.getrusage(resource.RUSAGE_SELF).ru_maxrss / 1000)
print("--- %s seconds ---" % (time.time() - start_time))
#st="""85...24..72......9..4.........1.7..23.5...9...4...........8..7..17..........36.4...53.....8......2..7..1.5..4....53...1..7...6..32...8..6.5....9..4....3......97..12..4......5.69.1...9...5.........7.7...52.9..3......2.9.6...5.4..9..8.1..3...9.4...57..3.1......2.7...234......8...4..7..4...49....6.5.42...3.....7..9....18.....7..1523........92....3.....1....47.8.......6............9...5.6.4.9.7...8....6.1.1....7.9..3..2...8..96..5....53..9...1..8...26....4...3......1..4......7..7...3..1...34.8....8..5....4.6..21.18......3..1.2..6......81.52..7.9....6..9....9.64...2...92......68.3...19..7...623..4.1....1...7....8.3..297...8..91...5.72......64....6.5.4.3.1...9...8.........9...5...6.4.6.2.7.7...4...5.........4...8...1.5.2.3.4.7.....4...2..7..8...3..8.799..5..3...6..2..9...1.97..6...3..9...3..4..6...9..1.35....7..2.8.......6.1.2.5...9.54....8.........3....85.1...3.2.8.4.......9.7..6...."""        
#hard1=""".....5.8....6.1.43..........1.5........1.6...3.......553.....61........4........."""
#st=""".....5.8....6.1.43..........1.5........1.6...3.......553.....61........4........."""
#L=[]
#p=0
#for i in range(1):
#    L.append([])
#    for j in range(9):
#        L[i].append([])
#        for k in range(9):
#            if(st[p]=='.'):
#                L[i][j].append(0)
#            else:
#                L[i][j].append(int(st[p]))
#            p+=1
#for i in L:
#    print("---Matrice---")
#    solve(i)
#print("---Total---")
#print(resource.getrusage(resource.RUSAGE_SELF).ru_maxrss / 1000)